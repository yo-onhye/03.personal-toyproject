{"version":3,"sources":["components/Form.js","components/Item.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","info","random","handleChange","e","target","value","name","setState","handleSubmitContents","preventDefault","alert","props","onInsert","handleSubmitRandom","onSet","className","type","this","onChange","onClick","onPlay","Component","Item","nextProps","nextState","onDelete","text","stopPropagation","id","List","infos","map","key","App","randomResult","isResultShow","handleInfoInsert","concat","handleRandomInsert","number","length","handleDelte","filter","handlePlayLottery","arr","i","temp","Math","floor","indexOf","push","handlePopupClose","item","index","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78453937.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Form.css\";\r\n\r\nclass Form extends Component {\r\n\tstate = {\r\n\t\tinfo: \"\",\r\n\t\trandom: \"\",\r\n\t};\r\n\r\n\thandleChange = (e) => {\r\n\t\tconst { value, name } = e.target;\r\n\r\n\t\tthis.setState({\r\n\t\t\t[name]: value,\r\n\t\t});\r\n\t};\r\n\r\n\thandleSubmitContents = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tif(this.state.info === \"\") {\r\n\t\t\talert('입력 창에 추첨 아이템을 입력해주세요');\r\n\t\t} else {\r\n\t\t\tthis.props.onInsert(this.state.info);\r\n\t\t\tthis.setState({\r\n\t\t\t\tinfo: \"\",\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\thandleSubmitRandom = (e) => {\r\n\t\te.preventDefault();\r\n\t\tif(this.state.random === \"\") {\r\n\t\t\talert('입력 창에 추첨 개수를 입력해주세요');\r\n\t\t} else if (this.state.random === \"0\") {\r\n\t\t\talert('0보다 큰 숫자를 입력해주세요');\r\n\t\t} else {\r\n\t\t\tthis.props.onSet(this.state.random);\r\n\t\t\tthis.setState({\r\n\t\t\t\trandom: \"\",\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Form\">\r\n\t\t\t\t<form className=\"form_container\">\r\n\t\t\t\t\t<div className=\"form_item\">\r\n\t\t\t\t\t\t<strong>추첨 아이템 추가</strong>\r\n\t\t\t\t\t\t<input type=\"text\" value={this.state.info} name=\"info\" onChange={this.handleChange} />\r\n\t\t\t\t\t\t<button type=\"button\" onClick={this.handleSubmitContents}>추가</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"form_item\">\r\n\t\t\t\t\t\t<strong>총 추첨 개수</strong>\r\n\t\t\t\t\t\t<input type=\"number\" value={this.state.random} name=\"random\" onChange={this.handleChange} />\r\n\t\t\t\t\t\t<button type=\"button\" onClick={this.handleSubmitRandom}>추가</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<button type=\"button\" className=\"form_play_btn\" onClick={this.props.onPlay}>추첨하기</button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\r\nimport \"./Item.css\";\r\n\r\nclass Item extends Component {\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\tif (this.props.info !== nextProps.info) {\r\n\t\t\treturn true;\r\n\t\t} else return false;\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { info, onDelete } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"Item\">\r\n\t\t\t\t<div className=\"text\">{info.text}</div>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"remove\"\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tonClick={(e) => {\r\n\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t\tonDelete(info.id);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tREMOVE\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Item;\r\n","import React, { Component } from \"react\";\r\nimport \"./List.css\";\r\nimport Item from \"./Item\";\r\n\r\nclass List extends Component {\r\n\trender() {\r\n\t\tconst { infos, onDelete } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"List\">\r\n\t\t\t\t{infos.map((info) => {\r\n\t\t\t\t\treturn <Item key={info.id} info={info} onDelete={onDelete} />;\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Form from \"./components/Form\";\r\nimport List from \"./components/List\";\r\n\r\nclass App extends Component {\r\n\tid = 1;\r\n\r\n\tstate = {\r\n\t\tinfos: [], // 추첨 아이템 오브젝트\r\n\t\trandomResult: [], // 추첨 아이템 배열 복사\r\n\t\trandom: null, // 추첨 개 수\r\n\t\tisResultShow: false, // 노출 유무\r\n\t};\r\n\r\n\thandleInfoInsert = (text) => {\r\n\t\tthis.setState({\r\n\t\t\tinfos: this.state.infos.concat({\r\n\t\t\t\ttext,\r\n\t\t\t\tid: this.id,\r\n\t\t\t}),\r\n\t\t});\r\n\t\tthis.id++;\r\n\t};\r\n\r\n\thandleRandomInsert = (number) => {\r\n\t\tconst { infos } = this.state;\r\n\t\tif (number < infos.length) {\r\n\t\t\tthis.setState({\r\n\t\t\t\trandom: number,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\thandleDelte = (id) => {\r\n\t\tthis.setState({\r\n\t\t\tinfos: this.state.infos.filter((info) => info.id !== id),\r\n\t\t});\r\n\t};\r\n\r\n\thandlePlayLottery = () => {\r\n\t\tconst { infos, random, randomResult } = this.state;\r\n\r\n\t\tfunction randomPickItem(arr) {\r\n\t\t\treturn arr[Math.floor(Math.random() * arr.length)];\r\n\t\t}\r\n\r\n\t\tif (infos.length > random) {\r\n\t\t\tif (random == null) {\r\n\t\t\t\talert(\"추첨 개수를 확인해주세요:D\");\r\n\t\t\t} else {\r\n\t\t\t\tfor (var i = 0; i < random; i++) {\r\n\t\t\t\t\tvar temp = 0;\r\n\r\n\t\t\t\t\tdo temp = randomPickItem(infos);\r\n\t\t\t\t\twhile (randomResult.indexOf(temp) !== -1);\r\n\t\t\t\t\trandomResult.push(temp);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisResultShow: true,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\talert(\"추첨 아이템과 추첨 개수를 확인해주세요:D\");\r\n\t\t}\r\n\t};\r\n\r\n\thandlePopupClose = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tconst { randomResult } = this.state;\r\n\r\n\t\tif (randomResult.length > 0) {\r\n\t\t\tthis.setState({\r\n\t\t\t\trandomResult: [],\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tisResultShow: false,\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className='App'>\r\n\t\t\t\t<h3>Random 추첨기</h3>\r\n\t\t\t\t<Form random={this.state.random} onInsert={this.handleInfoInsert} onSet={this.handleRandomInsert} onPlay={this.handlePlayLottery} />\r\n\t\t\t\t<div className={`Random-result-popup ${this.state.isResultShow && \"show\"}`}>\r\n\t\t\t\t\t<div className='Random-result-inner'>\r\n\t\t\t\t\t\t<strong>당첨 결과</strong>\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t{this.state.randomResult.map((item, index) => {\r\n\t\t\t\t\t\t\t\treturn <li key={index}>{item.text}</li>;\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t<button type='button' className='Random-result-close' onClick={this.handlePopupClose}>\r\n\t\t\t\t\t\t\t<span className='blind'>팝업 닫기</span>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<List infos={this.state.infos} onDelete={this.handleDelte} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}